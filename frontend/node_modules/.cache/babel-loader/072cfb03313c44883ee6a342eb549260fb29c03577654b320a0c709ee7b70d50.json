{"ast":null,"code":"/**\n * Utility functions for CSV export\n */\n\n/**\n * Convert analysis results to CSV format\n * @param {Array} ideas - Array of idea objects with ICE scores\n * @returns {string} CSV formatted string\n */\nexport const exportToCSV = ideas => {\n  if (!ideas || !Array.isArray(ideas)) {\n    throw new Error('Invalid ideas data');\n  }\n\n  // Define CSV headers\n  const headers = ['Priority', 'Title', 'Hypothesis', 'Category', 'Impact', 'Confidence', 'Effort', 'ICE Score', 'Estimated Lift', 'Implementation Time', 'Description', 'Reasoning', 'Implementation Steps', 'Success Metrics', 'Priority Level'];\n\n  // Convert ideas to CSV rows\n  const rows = ideas.map(idea => {\n    var _idea$priority, _idea$ice, _idea$ice2, _idea$ice3, _idea$ice4;\n    return [((_idea$priority = idea.priority) === null || _idea$priority === void 0 ? void 0 : _idea$priority.toUpperCase()) || '', `\"${idea.title || ''}\"`, `\"${idea.hypothesis || ''}\"`, idea.category || '', ((_idea$ice = idea.ice) === null || _idea$ice === void 0 ? void 0 : _idea$ice.impact) || '', ((_idea$ice2 = idea.ice) === null || _idea$ice2 === void 0 ? void 0 : _idea$ice2.confidence) || '', ((_idea$ice3 = idea.ice) === null || _idea$ice3 === void 0 ? void 0 : _idea$ice3.effort) || '', ((_idea$ice4 = idea.ice) === null || _idea$ice4 === void 0 ? void 0 : _idea$ice4.score) || '', `\"${idea.estimated_lift || ''}\"`, `\"${idea.implementation_time || ''}\"`, `\"${idea.description || ''}\"`, `\"${idea.reasoning || ''}\"`, `\"${idea.implementation || ''}\"`, `\"${idea.success_metrics || ''}\"`, idea.priority || ''];\n  });\n\n  // Combine headers and rows\n  const csvContent = [headers.join(','), ...rows.map(row => row.join(','))].join('\\n');\n  return csvContent;\n};\n\n/**\n * Download CSV file\n * @param {string} csvContent - CSV formatted string\n * @param {string} filename - Name of the file to download\n */\nexport const downloadCSV = (csvContent, filename = 'growth-backlog.csv') => {\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const link = document.createElement('a');\n  if (link.download !== undefined) {\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', filename);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n};\n\n/**\n * Export analysis results to CSV and trigger download\n * @param {Array} ideas - Array of idea objects with ICE scores\n * @param {string} filename - Optional custom filename\n */\nexport const exportAnalysisResults = (ideas, filename) => {\n  try {\n    const csvContent = exportToCSV(ideas);\n    const defaultFilename = `growth-backlog-${new Date().toISOString().split('T')[0]}.csv`;\n    downloadCSV(csvContent, filename || defaultFilename);\n  } catch (error) {\n    console.error('CSV export failed:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["exportToCSV","ideas","Array","isArray","Error","headers","rows","map","idea","_idea$priority","_idea$ice","_idea$ice2","_idea$ice3","_idea$ice4","priority","toUpperCase","title","hypothesis","category","ice","impact","confidence","effort","score","estimated_lift","implementation_time","description","reasoning","implementation","success_metrics","csvContent","join","row","downloadCSV","filename","blob","Blob","type","link","document","createElement","download","undefined","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","exportAnalysisResults","defaultFilename","Date","toISOString","split","error","console"],"sources":["/Users/ayushaayalur/Documents/ai-growth-backlog-generator/frontend/src/utils/csvExport.js"],"sourcesContent":["/**\n * Utility functions for CSV export\n */\n\n/**\n * Convert analysis results to CSV format\n * @param {Array} ideas - Array of idea objects with ICE scores\n * @returns {string} CSV formatted string\n */\nexport const exportToCSV = (ideas) => {\n  if (!ideas || !Array.isArray(ideas)) {\n    throw new Error('Invalid ideas data');\n  }\n\n  // Define CSV headers\n  const headers = [\n    'Priority',\n    'Title',\n    'Hypothesis',\n    'Category',\n    'Impact',\n    'Confidence',\n    'Effort',\n    'ICE Score',\n    'Estimated Lift',\n    'Implementation Time',\n    'Description',\n    'Reasoning',\n    'Implementation Steps',\n    'Success Metrics',\n    'Priority Level'\n  ];\n\n  // Convert ideas to CSV rows\n  const rows = ideas.map(idea => [\n    idea.priority?.toUpperCase() || '',\n    `\"${idea.title || ''}\"`,\n    `\"${idea.hypothesis || ''}\"`,\n    idea.category || '',\n    idea.ice?.impact || '',\n    idea.ice?.confidence || '',\n    idea.ice?.effort || '',\n    idea.ice?.score || '',\n    `\"${idea.estimated_lift || ''}\"`,\n    `\"${idea.implementation_time || ''}\"`,\n    `\"${idea.description || ''}\"`,\n    `\"${idea.reasoning || ''}\"`,\n    `\"${idea.implementation || ''}\"`,\n    `\"${idea.success_metrics || ''}\"`,\n    idea.priority || ''\n  ]);\n\n  // Combine headers and rows\n  const csvContent = [headers.join(','), ...rows.map(row => row.join(','))].join('\\n');\n\n  return csvContent;\n};\n\n/**\n * Download CSV file\n * @param {string} csvContent - CSV formatted string\n * @param {string} filename - Name of the file to download\n */\nexport const downloadCSV = (csvContent, filename = 'growth-backlog.csv') => {\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n  const link = document.createElement('a');\n  \n  if (link.download !== undefined) {\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', filename);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n};\n\n/**\n * Export analysis results to CSV and trigger download\n * @param {Array} ideas - Array of idea objects with ICE scores\n * @param {string} filename - Optional custom filename\n */\nexport const exportAnalysisResults = (ideas, filename) => {\n  try {\n    const csvContent = exportToCSV(ideas);\n    const defaultFilename = `growth-backlog-${new Date().toISOString().split('T')[0]}.csv`;\n    downloadCSV(csvContent, filename || defaultFilename);\n  } catch (error) {\n    console.error('CSV export failed:', error);\n    throw error;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}