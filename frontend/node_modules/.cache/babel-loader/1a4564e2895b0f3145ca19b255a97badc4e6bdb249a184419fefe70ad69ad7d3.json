{"ast":null,"code":"var _jsxFileName = \"/Users/ayushaayalur/Documents/ai-growth-backlog-generator/frontend/src/components/LoadingBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './LoadingBar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoadingBar = ({\n  isVisible,\n  onComplete\n}) => {\n  _s();\n  var _steps$currentStep;\n  const [progress, setProgress] = useState(0);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [hasCompleted, setHasCompleted] = useState(false);\n  const steps = [{\n    name: 'Uploading screenshot...',\n    duration: 800\n  }, {\n    name: 'Analyzing visual elements...',\n    duration: 1000\n  }, {\n    name: 'Extracting text content...',\n    duration: 800\n  }, {\n    name: 'Generating CRO ideas...',\n    duration: 2000\n  }, {\n    name: 'Calculating ICE scores...',\n    duration: 800\n  }, {\n    name: 'Finalizing results...',\n    duration: 600\n  }];\n  useEffect(() => {\n    if (!isVisible) {\n      setProgress(0);\n      setCurrentStep(0);\n      setIsAnimating(false);\n      setHasCompleted(false);\n      return;\n    }\n    setIsAnimating(true);\n    setHasCompleted(false);\n    let startTime = Date.now();\n    const totalDuration = steps.reduce((sum, step) => sum + step.duration, 0);\n    const updateProgress = () => {\n      const elapsed = Date.now() - startTime;\n      const progressPercent = Math.min(elapsed / totalDuration * 95, 95);\n      setProgress(progressPercent);\n\n      // Update current step based on elapsed time\n      let cumulativeTime = 0;\n      for (let i = 0; i < steps.length; i++) {\n        cumulativeTime += steps[i].duration;\n        if (elapsed < cumulativeTime) {\n          setCurrentStep(i);\n          break;\n        }\n      }\n      if (elapsed < totalDuration && isAnimating) {\n        requestAnimationFrame(updateProgress);\n      } else if (elapsed >= totalDuration) {\n        setProgress(95);\n        setCurrentStep(steps.length - 1);\n\n        // Wait a moment then go to 100%\n        setTimeout(() => {\n          setProgress(100);\n          setHasCompleted(true);\n\n          // Call onComplete after reaching 100%\n          if (onComplete) {\n            onComplete();\n          }\n        }, 200);\n      }\n    };\n    requestAnimationFrame(updateProgress);\n  }, [isVisible, isAnimating, onComplete]);\n\n  // If analysis completes while loading bar is still animating, let it finish\n  useEffect(() => {\n    if (!isVisible && isAnimating && progress < 95) {\n      // Analysis completed early, but let the loading bar finish its animation\n      return;\n    }\n  }, [isVisible, isAnimating, progress]);\n\n  // Don't show the loading bar if it's not visible and not animating\n  if (!isVisible && !isAnimating) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDD04 Analyzing Your Screenshot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"current-step\",\n        children: ((_steps$currentStep = steps[currentStep]) === null || _steps$currentStep === void 0 ? void 0 : _steps$currentStep.name) || 'Processing...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar\",\n          style: {\n            width: `${progress}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-text\",\n        children: [Math.round(progress), \"% Complete\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-tips\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uD83D\\uDCA1 \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Tip:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this), \" This usually takes about 6 seconds to analyze your page\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uD83D\\uDCCA We're analyzing your page for conversion optimization opportunities\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(LoadingBar, \"knAg67tmSYcwh5DPd9x74blAlqg=\");\n_c = LoadingBar;\nexport default LoadingBar;\nvar _c;\n$RefreshReg$(_c, \"LoadingBar\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","LoadingBar","isVisible","onComplete","_s","_steps$currentStep","progress","setProgress","currentStep","setCurrentStep","isAnimating","setIsAnimating","hasCompleted","setHasCompleted","steps","name","duration","startTime","Date","now","totalDuration","reduce","sum","step","updateProgress","elapsed","progressPercent","Math","min","cumulativeTime","i","length","requestAnimationFrame","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","width","round","_c","$RefreshReg$"],"sources":["/Users/ayushaayalur/Documents/ai-growth-backlog-generator/frontend/src/components/LoadingBar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './LoadingBar.css';\n\nconst LoadingBar = ({ isVisible, onComplete }) => {\n  const [progress, setProgress] = useState(0);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [hasCompleted, setHasCompleted] = useState(false);\n  \n  const steps = [\n    { name: 'Uploading screenshot...', duration: 800 },\n    { name: 'Analyzing visual elements...', duration: 1000 },\n    { name: 'Extracting text content...', duration: 800 },\n    { name: 'Generating CRO ideas...', duration: 2000 },\n    { name: 'Calculating ICE scores...', duration: 800 },\n    { name: 'Finalizing results...', duration: 600 }\n  ];\n\n  useEffect(() => {\n    if (!isVisible) {\n      setProgress(0);\n      setCurrentStep(0);\n      setIsAnimating(false);\n      setHasCompleted(false);\n      return;\n    }\n\n    setIsAnimating(true);\n    setHasCompleted(false);\n    let startTime = Date.now();\n    \n    const totalDuration = steps.reduce((sum, step) => sum + step.duration, 0);\n    \n    const updateProgress = () => {\n      const elapsed = Date.now() - startTime;\n      const progressPercent = Math.min((elapsed / totalDuration) * 95, 95);\n      \n      setProgress(progressPercent);\n      \n      // Update current step based on elapsed time\n      let cumulativeTime = 0;\n      for (let i = 0; i < steps.length; i++) {\n        cumulativeTime += steps[i].duration;\n        if (elapsed < cumulativeTime) {\n          setCurrentStep(i);\n          break;\n        }\n      }\n      \n      if (elapsed < totalDuration && isAnimating) {\n        requestAnimationFrame(updateProgress);\n      } else if (elapsed >= totalDuration) {\n        setProgress(95);\n        setCurrentStep(steps.length - 1);\n        \n        // Wait a moment then go to 100%\n        setTimeout(() => {\n          setProgress(100);\n          setHasCompleted(true);\n          \n          // Call onComplete after reaching 100%\n          if (onComplete) {\n            onComplete();\n          }\n        }, 200);\n      }\n    };\n    \n    requestAnimationFrame(updateProgress);\n  }, [isVisible, isAnimating, onComplete]);\n\n  // If analysis completes while loading bar is still animating, let it finish\n  useEffect(() => {\n    if (!isVisible && isAnimating && progress < 95) {\n      // Analysis completed early, but let the loading bar finish its animation\n      return;\n    }\n  }, [isVisible, isAnimating, progress]);\n\n  // Don't show the loading bar if it's not visible and not animating\n  if (!isVisible && !isAnimating) return null;\n\n  return (\n    <div className=\"loading-container\">\n      <div className=\"loading-content\">\n        <h3>ðŸ”„ Analyzing Your Screenshot</h3>\n        <p className=\"current-step\">{steps[currentStep]?.name || 'Processing...'}</p>\n        \n        <div className=\"progress-bar-container\">\n          <div \n            className=\"progress-bar\" \n            style={{ width: `${progress}%` }}\n          ></div>\n        </div>\n        \n        <div className=\"progress-text\">\n          {Math.round(progress)}% Complete\n        </div>\n        \n        <div className=\"loading-tips\">\n          <p>ðŸ’¡ <strong>Tip:</strong> This usually takes about 6 seconds to analyze your page</p>\n          <p>ðŸ“Š We're analyzing your page for conversion optimization opportunities</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoadingBar; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}