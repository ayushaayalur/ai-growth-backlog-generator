{"ast":null,"code":"/**\n * API service for communicating with the backend\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nexport const apiService = {\n  /**\n   * Analyze a screenshot and generate growth backlog\n   * @param {File} screenshotFile - The uploaded screenshot file\n   * @returns {Promise<Object>} Analysis results with ideas and ICE scores\n   */\n  async analyzeScreenshot(screenshotFile) {\n    try {\n      const formData = new FormData();\n      formData.append('file', screenshotFile);\n\n      // Create a timeout promise\n      const timeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error('Request timed out after 2 minutes')), 120000);\n      });\n\n      // Create the fetch promise\n      const fetchPromise = fetch(`${API_BASE_URL}/analyze-screenshot`, {\n        method: 'POST',\n        body: formData\n      });\n\n      // Race between fetch and timeout\n      const response = await Promise.race([fetchPromise, timeoutPromise]);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Analysis failed');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API call failed:', error);\n      throw error;\n    }\n  },\n  /**\n   * Health check endpoint\n   * @returns {Promise<Object>} Health status\n   */\n  async healthCheck() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/health`);\n      return await response.json();\n    } catch (error) {\n      console.error('Health check failed:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","apiService","analyzeScreenshot","screenshotFile","formData","FormData","append","timeoutPromise","Promise","_","reject","setTimeout","Error","fetchPromise","fetch","method","body","response","race","ok","errorData","json","detail","error","console","healthCheck"],"sources":["/Users/ayushaayalur/Documents/ai-growth-backlog-generator/frontend/src/services/api.js"],"sourcesContent":["/**\n * API service for communicating with the backend\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nexport const apiService = {\n  /**\n   * Analyze a screenshot and generate growth backlog\n   * @param {File} screenshotFile - The uploaded screenshot file\n   * @returns {Promise<Object>} Analysis results with ideas and ICE scores\n   */\n  async analyzeScreenshot(screenshotFile) {\n    try {\n      const formData = new FormData();\n      formData.append('file', screenshotFile);\n\n      // Create a timeout promise\n      const timeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error('Request timed out after 2 minutes')), 120000);\n      });\n\n      // Create the fetch promise\n      const fetchPromise = fetch(`${API_BASE_URL}/analyze-screenshot`, {\n        method: 'POST',\n        body: formData,\n      });\n\n      // Race between fetch and timeout\n      const response = await Promise.race([fetchPromise, timeoutPromise]);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Analysis failed');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('API call failed:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Health check endpoint\n   * @returns {Promise<Object>} Health status\n   */\n  async healthCheck() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/health`);\n      return await response.json();\n    } catch (error) {\n      console.error('Health check failed:', error);\n      throw error;\n    }\n  }\n}; "],"mappings":"AAAA;AACA;AACA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,OAAO,MAAMC,UAAU,GAAG;EACxB;AACF;AACA;AACA;AACA;EACE,MAAMC,iBAAiBA,CAACC,cAAc,EAAE;IACtC,IAAI;MACF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,cAAc,CAAC;;MAEvC;MACA,MAAMI,cAAc,GAAG,IAAIC,OAAO,CAAC,CAACC,CAAC,EAAEC,MAAM,KAAK;QAChDC,UAAU,CAAC,MAAMD,MAAM,CAAC,IAAIE,KAAK,CAAC,mCAAmC,CAAC,CAAC,EAAE,MAAM,CAAC;MAClF,CAAC,CAAC;;MAEF;MACA,MAAMC,YAAY,GAAGC,KAAK,CAAC,GAAGjB,YAAY,qBAAqB,EAAE;QAC/DkB,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEZ;MACR,CAAC,CAAC;;MAEF;MACA,MAAMa,QAAQ,GAAG,MAAMT,OAAO,CAACU,IAAI,CAAC,CAACL,YAAY,EAAEN,cAAc,CAAC,CAAC;MAEnE,IAAI,CAACU,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIT,KAAK,CAACQ,SAAS,CAACE,MAAM,IAAI,iBAAiB,CAAC;MACxD;MAEA,OAAO,MAAML,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MACxC,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;AACA;EACE,MAAME,WAAWA,CAAA,EAAG;IAClB,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMH,KAAK,CAAC,GAAGjB,YAAY,SAAS,CAAC;MACtD,OAAO,MAAMoB,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}